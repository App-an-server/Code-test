name: Code Analysis

on:
  workflow_dispatch:  # Manual trigger; add other triggers like push, pull_request if needed

jobs:
  analyze_cpp:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Install Cppcheck
        run: |
          sudo apt-get update -y
          sudo apt-get install -y cppcheck

      - name: Set up output file
        run: touch cppcheck_errors.txt || true

      - name: Run Cppcheck
        continue-on-error: true
        run: |
          find . -type f \( -name "*.cpp" -o -name "*.cxx" -o -name "*.cc" \) | \
          while read -r file; do
            cppcheck \
              --enable=all \
              --inconclusive \
              --std=c++20 \
              --language=c++ \
              --force \
              --verbose \
              --error-exitcode=0 \
              -Iinclude \
              -Isrc \
              "$file" 2>> cppcheck_errors.txt || true
          done
          cat cppcheck_errors.txt || true

      - name: Upload Cppcheck results
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-results
          path: cppcheck_errors.txt
          if-no-files-found: ignore

  analyze_swift:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Homebrew
        run: |
          # Ensure Homebrew is installed or updated
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo "# Set PATH for Homebrew" >> $GITHUB_ENV
            echo "PATH=/usr/local/bin:/opt/homebrew/bin:$PATH" >> $GITHUB_ENV
          else
            brew update
          fi

      - name: Install SwiftLint and SwiftFormat
        run: |
          brew install swiftlint swiftformat

      - name: Verify tools
        run: |
          swiftlint version || echo "SwiftLint not installed correctly"
          swiftformat --version || echo "SwiftFormat not installed correctly"

      - name: Run SwiftLint
        continue-on-error: true
        run: |
          swiftlint lint \
            --strict \
            --reporter json \
            > swiftlint_errors.json 2>&1 || true
          cat swiftlint_errors.json || true

      - name: Run SwiftFormat
        continue-on-error: true
        run: |
          swiftformat . \
            --swiftversion 5.10 \
            --verbose \
            > swiftformat_errors.txt 2>&1 || true
          cat swiftformat_errors.txt || true

      - name: Upload Swift analysis results
        uses: actions/upload-artifact@v4
        with:
          name: swift-analysis-results
          path: |
            swiftlint_errors.json
            swiftformat_errors.txt
          if-no-files-found: ignore

  create_pull_request:
    runs-on: ubuntu-latest
    needs: [analyze_cpp, analyze_swift]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine default branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Create new branch with timestamp
        run: |
          BRANCH_NAME="results-$(date '+%Y%m%d%H%M%S')"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Errors to Fix directory and move artifacts
        run: |
          mkdir -p "Errors to Fix"
          mv artifacts/*/* "Errors to Fix/" || true
          rm -rf artifacts

      - name: Commit analysis results
        run: |
          git add "Errors to Fix"/*.txt "Errors to Fix"/*.json
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Add code analysis results to Errors to Fix folder"
          else
            echo "No changes to commit"
            exit 0
          fi

      - name: Push changes
        run: git push origin ${{ env.BRANCH_NAME }} || true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add code analysis results to Errors to Fix folder"
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ env.DEFAULT_BRANCH }}
          title: "Code Analysis Results - $(date '+%Y-%m-%d')"
          body: |
            This pull request contains the results of code analysis for C++ and Swift, stored in the "Errors to Fix" folder:
            - Cppcheck results: Errors to Fix/cppcheck_errors.txt
            - SwiftLint results: Errors to Fix/swiftlint_errors.json
            - SwiftFormat results: Errors to Fix/swiftformat_errors.txt
          labels: "code-quality, automated-pr"